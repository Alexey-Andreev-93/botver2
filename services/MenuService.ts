// services/MenuService.ts
import { MENU_ITEMS } from "../config/constants";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
export interface MenuItem {
  id: number;
  name: string;
  price: number;
  category: string;
  emoji: string;
  weight?: string;
  unit?: string;
}

export class MenuService {
  static getMenuByCategory(category: string): MenuItem[] {
    return MENU_ITEMS.filter(item => item.category === category);
  }

  static getMenuItem(id: number): MenuItem | undefined {
    return MENU_ITEMS.find(item => item.id === id);
  }

  static getAllCategories(): string[] {
    return Array.from(new Set(MENU_ITEMS.map(item => item.category)));
  }

  static getCategoryName(category: string): string {
    const names: { [key: string]: string } = {
      'medoviki': 'üç∞ –ú–ï–î–û–í–ò–ö–ò üçØ',
      'cakes': 'üéÇ –¢–û–†–¢–´ –ò –ü–ò–†–û–ñ–ù–´–ï',
      'lunch': 'üçΩ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –û–ë–ï–î–´'
    };
    return names[category] || category;
  }

  static formatMenuItem(item: MenuItem): string {
    const weight = item.weight ? ` (${item.weight})` : '';
    return `${item.emoji} ${item.name}${weight} - ${item.price}‚ÇΩ`;
  }

  static createMenuKeyboard() {
    const keyboard = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories: { [key: string]: MenuItem[] } = {};
    MENU_ITEMS.forEach(item => {
      if (!categories[item.category]) {
        categories[item.category] = [];
      }
      categories[item.category].push(item);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–¥–æ–≤–∏–∫–æ–≤ (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
    keyboard.push([{ text: this.getCategoryName('medoviki'), callback_data: "ignore" }]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–æ–≤–∏–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥
    categories.medoviki.forEach(item => {
      const weight = item.weight ? ` (${item.weight})` : '';
      keyboard.push([{ 
        text: `${item.emoji} ${item.name}${weight} - ${item.price}‚ÇΩ`, 
        callback_data: `add_${item.id}` 
      }]);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ—Ä—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
    keyboard.push([{ text: this.getCategoryName('cakes'), callback_data: "ignore" }]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥
    categories.cakes.forEach(item => {
      const weight = item.weight ? ` (${item.weight})` : '';
      keyboard.push([{ 
        text: `${item.emoji} ${item.name}${weight} - ${item.price}‚ÇΩ`, 
        callback_data: `add_${item.id}` 
      }]);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–µ–¥–æ–≤ (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
    keyboard.push([{ text: this.getCategoryName('lunch'), callback_data: "ignore" }]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ–¥—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥
    categories.lunch.forEach(item => {
      keyboard.push([{ 
        text: `${item.emoji} ${item.name} - ${item.price}‚ÇΩ`, 
        callback_data: `add_${item.id}` 
      }]);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    keyboard.push([{ text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data: "view_cart" }]);

    return keyboard;
  }
}