// handlers/callbackHandlers.ts
import { MenuService } from "../services/MenuService";
import { userStateService } from "../services/UserStateService";
import { Logger } from "../utils/logger";

export const callbackHandlers = {
  addItem: async (ctx: any, match: RegExpMatchArray) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    const itemId = parseInt(match[1]);
    const menuItem = MenuService.getMenuItem(itemId);
    
    if (!menuItem) {
      ctx.answerCbQuery("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    userStateService.addToCart(userId, {
      id: menuItem.id,
      name: menuItem.name,
      price: menuItem.price,
      quantity: 1,
      emoji: menuItem.emoji
    });

    ctx.answerCbQuery(`‚úÖ ${menuItem.emoji} ${menuItem.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
    Logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–∏–ª –≤ –∫–æ—Ä–∑–∏–Ω—É: ${menuItem.name}`);
  },

  viewCart: async (ctx: any) => {
    const userId = ctx.from?.id;
    if (!userId) return;
    ctx.answerCbQuery();
    // BotService.showCart –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
  },

  checkout: async (ctx: any) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    const state = userStateService.getState(userId);
    if (!state || state.data.cart.length === 0) {
      ctx.answerCbQuery("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
      return;
    }

    userStateService.updateState(userId, { 
      state: "awaiting_name", 
      data: { ...state.data } 
    });

    ctx.editMessageText("–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
    Logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞`);
  },

  clearCart: async (ctx: any) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    userStateService.clearCart(userId);
    ctx.answerCbQuery("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞");
    ctx.deleteMessage();
    Logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—á–∏—Å—Ç–∏–ª –∫–æ—Ä–∑–∏–Ω—É`);
  },

  addMore: async (ctx: any) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    ctx.deleteMessage();
    const keyboard = MenuService.createMenuKeyboard();

    ctx.reply("üçΩ *–ú–µ–Ω—é –Ω–∞—à–µ–≥–æ –∫–∞—Ñ–µ:*", {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  },

  backToMenu: async (ctx: any) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    ctx.deleteMessage();
    const keyboard = MenuService.createMenuKeyboard();

    ctx.reply("üçΩ *–ú–µ–Ω—é –Ω–∞—à–µ–≥–æ –∫–∞—Ñ–µ:*", {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  },

  ignore: (ctx: any) => {
    ctx.answerCbQuery(""); // –ü—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  }
};