// handlers/textHandlers.ts
import { userStateService } from "../services/UserStateService";
import { ValidationService } from "../services/ValidationService";
import { Order } from "../models/Order";
import { CONSTANTS } from "../config/constants";
import { Logger } from "../utils/logger";

export const textHandlers = {
  processText: async (ctx: any) => {
    const userId = ctx.from?.id;
    const messageText = ctx.message.text;

    if (!userId) return;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (messageText.startsWith('/')) {
      return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if (["üìã –ú–µ–Ω—é", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ùì –ü–æ–º–æ—â—å"].includes(messageText)) {
      return;
    }

    const userState = userStateService.getState(userId);

    if (userState?.state === "awaiting_name") {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
      const validation = ValidationService.isValidName(messageText);
      if (!validation.isValid) {
        ctx.reply(validation.message || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      userStateService.updateState(userId, {
        state: "awaiting_phone",
        data: { ...userState.data, name: messageText.trim() }
      });

      ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:");
      Logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –∏–º—è: ${messageText}`);

    } else if (userState?.state === "awaiting_phone") {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const validation = ValidationService.isValidPhone(messageText);
      if (!validation.isValid) {
        ctx.reply(validation.message || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω");
        return;
      }

      const formattedPhone = ValidationService.formatPhone(messageText);

      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const order = await Order.create({
          user_id: userId,
          user_name: userState.data.name!,
          user_phone: formattedPhone,
          items: userState.data.cart.map(item => 
            `${item.emoji} ${item.name} x${item.quantity}`
          ).join(", "),
          total_amount: userStateService.getCartTotal(userId),
          status: CONSTANTS.ORDER.STATUS.NEW,
        });

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—Ä–∑–∏–Ω—É
        userStateService.clearState(userId);
        userStateService.clearCart(userId);

        ctx.reply(
          `üéâ –°–ø–∞—Å–∏–±–æ, ${userState.data.name}!\n\n–í–∞—à –∑–∞–∫–∞–∑ #${order.id} –ø—Ä–∏–Ω—è—Ç! üìã\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ${formattedPhone} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è üìû\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${order.total_amount}‚ÇΩ`
        );

        Logger.success(`–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id} –æ—Ç ${userState.data.name} (${userId}) –Ω–∞ —Å—É–º–º—É ${order.total_amount}‚ÇΩ`);
        
      } catch (error) {
        Logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
        ctx.reply(CONSTANTS.MESSAGES.ORDER_ERROR);
      }
    }
  }
};