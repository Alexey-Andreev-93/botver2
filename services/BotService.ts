// services/BotService.ts
import { Telegraf } from "telegraf";
import { userStateService } from "./UserStateService";
import { Order } from "../models/Order";
import { CONSTANTS } from "../config/constants";
import { Logger } from "../utils/logger";

export class BotService {
  static showCart(ctx: any, userId: number) {
    const state = userStateService.getState(userId);
    const cart = state?.data.cart || [];
    const total = userStateService.getCartTotal(userId);

    if (cart.length === 0) {
      ctx.reply("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
      return;
    }

    let cartText = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n";
    cart.forEach((item, index) => {
      cartText += `${index + 1}. ${item.emoji} ${item.name} - ${item.price}‚ÇΩ x ${item.quantity} = ${item.price * item.quantity}‚ÇΩ\n`;
    });
    
    cartText += `\nüíµ *–ò—Ç–æ–≥–æ: ${total}‚ÇΩ*`;

    const keyboard = [
      [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä–æ–≤", callback_data: "add_more" }],
      [{ text: "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: "checkout" }],
      [{ text: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data: "clear_cart" }],
      [{ text: "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é", callback_data: "back_to_menu" }]
    ];

    ctx.reply(cartText, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  static async handleOrdersCommand(ctx: any) {
    const userId = ctx.from?.id;
    
    if (userId !== CONSTANTS.BOT.ADMIN_ID) {
      Logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ`);
      return ctx.reply(CONSTANTS.MESSAGES.NO_ACCESS);
    }

    try {
      const orders = await Order.findAll({
        order: [['created_at', 'DESC']],
        limit: 10
      });

      if (orders.length === 0) {
        Logger.info("–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫–∞–∑—ã - –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç");
        return ctx.reply(CONSTANTS.MESSAGES.NO_ORDERS);
      }

      let ordersText = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n";
      
      orders.forEach(order => {
        ordersText += `#${order.id} ‚Ä¢ ${order.user_name}\n`;
        ordersText += `üìû ${order.user_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        ordersText += `üçΩ ${order.items}\n`;
        ordersText += `üí∞ ${order.total_amount} —Ä—É–±.\n`;
        ordersText += `üìä –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
        ordersText += `üïí ${order.created_at.toLocaleString('ru-RU')}\n`;
        ordersText += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
      });

      if (ordersText.length > 4000) {
        ordersText = ordersText.substring(0, 4000) + "\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤)";
      }
      
      ctx.reply(ordersText);
      Logger.info(`–ê–¥–º–∏–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
      
    } catch (error) {
      Logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:", error);
      ctx.reply(CONSTANTS.MESSAGES.ORDERS_ERROR);
    }
  }
}